#!/usr/bin/python 
# -*- coding: utf-8 -*-

import csv
import random
import datetime
import json
import re
import sys

# 'C:\\Users\\b21a0142\\Desktop\\OJT_ishii\\lets\\data.csv'
# '.\\data.csv'

def main():
    if len(sys.argv) < 2:
        sys.exit( 1 )

    sub(sys.argv[1], sys.argv[2])


def next(filename):
    with open(filename, 'r') as file:  # パスは後で変更(変数名も)

        for line in csv.reader(file):
            yield line


def csv2dict(data):
    return  {
        "id": data[0],
        "serialNumber": data[1],
        "batteryType": data[2],
        "brandName": 0,
        "type": 0,
        "rechargeEnergySource": 0,
        "dateLastReported": 0,
        "location": {
            "type": "Point",
            "coordinates": [ data[9], data[10] ]
        },
        "owner": "no"# data[11]
    }

def createDatas( devDic ):
    # 
    Status = ['consumingEnergy', 'givingEnergy', 'standby']
    ret = []
    for n in range(1, 1440):
        dic = {}
        batteryStatus = random.choice(Status)
        dic['serialNumber'] = devDic["serialNumber"],
        dic['type'] = 'StorageBatteryMeasurement',
        dic['timestamp'] = "2021/20/20 20:20:20+000Z",
        dic['stateOfCharge'] = _stateOfCharge(batteryStatus),
        dic['location'] = _location(devDic["location"]["coordinates"]),
        dic['temperature'] = [1, 2],
        dic['batteryStatus'] = batteryStatus

        ret.append(dic)
    return ret

def sub(datestring, filename):

    dt = datestring # convert to datetime
    s = []
    r1 = [] # location
    for data in next(filename):
        devDic = csv2dict(data)

        #print(devDic)
        #print("---")
        #print(json.dumps(devDic))

        out = createDatas( devDic )
        print(json.dumps(out))

        sys.exit(88)
    
#        s.append(data[0])
#        r2 = [data[9], data[10]]
#        r1.append(r2)
#
#        for data in dataline:
#            s.append(data[0])
#            r2 = [data[9], data[10]]
#            r1.append(r2)
#        arr = []
#        s_no = {}
#        for i in range(0, len(s)):
#            s_no = {i: s[i]}
#            arr.append(s_no)
#    Status = ['consumingEnergy', 'givingEnergy', 'standby']
#    dic = {}
#    for num in arr:
#        batteryStatus = random.choice(Status)
#        dic['serialNumber'] = num,
#        dic['type'] = 'StorageBatteryMeasurement',
#        dic['timestamp'] = _collection_datetime,
#        dic['stateOfCharge'] = _stateOfCharge(batteryStatus),
#        dic['location'] = _location,
#        dic['temperature'] = _temperature,
#        dic['batteryStatus'] = batteryStatus
#        print(dic)
#        json_data = json.dumps(dic)
#        print(json_data)
#
#


def _collection_datetime():
    today = datetime.datetime.today()
    date_time = today.replace(hour=0, minute=0, second=0, microsecond=0)
    c_datetime = str(date_time)
    return c_datetime


def _stateOfCharge(batteryStatus):
    n = random.uniform(0.00, 1.00)
    m = random.uniform(0.01, n)
    sleep = n
    if re.fullmatch('standby', batteryStatus):
        temp = format(sleep, '.2f')
        temp = float(temp)
    elif re.fullmatch('givingEnergy', batteryStatus):
        m_temp = n - m
        temp = format(m_temp, '.2f')
        temp = float(temp)
    elif re.fullmatch('consumingEnergy', batteryStatus):
        p_temp = n + m
        temp = format(p_temp, '.2f')
        temp = float(temp)
    return temp


def _location(r1):
    r = {
            "type": 'Point',
            "coordinates": r1,
        }
    return r

"""
 location: { 
     [
       { type: Point, coordinates: 43.567 }
       { type: Point, coordinates: 143.567 }
    ]
 }
"""


def _temperature():
    n = random.uniform(272, 313)
    temp = format(n, '.2f')
    temp = float(temp)
    return temp



if __name__ == "__main__":
    ret = main()
    sys.exit(ret)


